[{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bharathananth.github.io/compareRhythms/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Bharath Ananthasubramaniam  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. compareRhythms Copyright (C) 2020 Bharath Ananthasubramaniam This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"usage-summary","dir":"Articles","previous_headings":"","what":"Usage summary","title":"Analyzing rhythmic data with compareRhythms","text":"analysis run using single function compareRhythms(). execute function, three necessary ingredients timeseries data, experimental design parameters choose tune method. output function data.frame IDs differentially rhythmic features, category classified optionally rhythm parameters features two groups. differential rhythmicity categories gain , loss , change , rhythms (respect reference/control group).","code":""},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"time-series-data-and-experimental-design","dir":"Articles","previous_headings":"","what":"Time series data and experimental design","title":"Analyzing rhythmic data with compareRhythms","text":"two inputs mandatory run workflows package. single (numeric) matrix combining timeseries datasets. rows matrix features columns different samples. rownames data matrix provide id list features. data.frame specifying experimental design (details regarding sample) order interpret data matrix. must one row data.frame describing sample (column) data matrix. data.frame must contain numeric column named time specifying time associated sample factor column named group specifying whether sample belongs control experimental group. group variable must two levels one chosen reference respect results presented. Optionally, column named batch can used specify categorical (factor) covariate representing independent confounding variable (Note: covariates included methods. ). Currently, capability include continuous covariates analysis.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"choice-of-method","dir":"Articles","previous_headings":"","what":"Choice of method","title":"Analyzing rhythmic data with compareRhythms","text":"package currently offers choice 6 different methods. describe tuning parameters available method. three parameters common methods. period : positive number period rhythms, whose amplitude phase must compared two timeseries datasets. Defaults 24. amp_cutoff : features peak--trough amplitude greater positive number least one group included differential rhythmicity results. just_classify : boolean flag specifies amplitude phase estimates differential rhythmic feature two groups (just_classify = FALSE) must returned addition list ids classification differential rhythmicity categories. different approaches can divided model selection rest implementations hypothesis testing: Model selection (method = \"mod_sel\" (default)) criterion used select desired information criterion pick best model/category. “bic” (default) selects Bayesian Information Criterion (BIC) “aic” selects Akaike Information Criterion (AIC). BIC penalizes model size AIC hence favors smaller models. schwarz_wt_cutoff (default = 0.6) probability threshold weight best model/category. weight best model/category (called Schwarz weight BIC Akaike weight AIC) probability chosen category best category given data models/categories. Higher number (0 1), certain classification. models reach threshold left unclassified. Use cases: method can used normalized data. Technically, assumption noise/errors /normal sample independent needs acceptable. DODR (method = \"dodr\") rhythm_fdr threshold pre-filtering rhythmic features either group based multiple testing corrected p-value rain. compare_fdr threshold selecting differentially rhythmic features using multiple testing corrected p-values DODR. Use cases: method can used normalized data. limma (method = \"limma\") rhythm_fdr threshold pre-filtering rhythmic features either group based multiple testing corrected p-value. compare_fdr threshold selecting differentially rhythmic features using multiple testing corrected p-values robust boolean make noise estimates individual features limma robust outliers (see eBayes limma details). Use cases: method used log normalized microarray data (see limma details). voom (method = \"voom\") rhythm_fdr (see limma) compare_fdr (see limma) robust (see limma) outliers boolean downweight outlier samples analysis. (see voomWithQualityWeights limma details) Use cases: method used count data RNA-seq experiment. Count data aligment (STAR, TopHat2) followed quantification (htseq-count, summarizeOverlaps, featureCounts) can directly used. tximport used import data, use counts setting countsFromAbundance = \"lengthScaledTPM\" \"scaledTPM\" tximport() call. DESeq2 (method = \"deseq2\") rhythm_fdr (see limma) compare_fdr (see limma) length optional matrix (size data) containing average transcript length gene sample. Use cases: method used count data RNA-seq experiment. Count data aligment (STAR, TopHat2) followed quantification (htseq-count, summarizeOverlaps, featureCounts) can directly used. tximport used import data, use counts length obtained tximport() call countsFromAbundance = \"\". edgeR (method = \"edger\") rhythm_fdr (see limma) compare_fdr (see limma) length (see DESeq2) Use cases: method used count data RNA-seq experiment. Count data aligment (STAR, TopHat2) followed quantification (htseq-count, summarizeOverlaps, featureCounts) can directly used. tximport used import data, use counts length obtained tximport() call countsFromAbundance = \"\". Cosinor (method = \"cosinor\"): implements simple classical cosinor analysis includes option deal longitudinal data (common data human studies). rhythm_fdr (see limma) compare_fdr (see limma) longitudinal boolean switch independent time samples (FALSE, default) repeated-measures samples (TRUE). Use cases: method can used normalized dataset moderate size (hundreds features). analysis assumes noise data Gaussian trends measurements across time. longitudinal = TRUE requires user provide factor column ID exp_design identity experimental unit repeatedly measured (Note: analysis uses mixed-model framework lme4).","code":""},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"example-1-microarray-data","dir":"Articles","previous_headings":"","what":"Example 1: Microarray data","title":"Analyzing rhythmic data with compareRhythms","text":"analyze first microarray data changes circadian liver transcriptome high fat diet (HFD) respect normal chow (NC) (Eckel-Mahan et al. 2013). data provided package 23060x36 matrix called high_fat_diet_ma. Liver transcripts quantified every 4h 24h (6 samples) 2 different conditions 3 biological replicates (36=6x2x3). maEndToEnd describes perform quality control normalization microarrays. first construct data.frame experimental design. simple example, required experimental design information encoded column names, extract. exp_design two required columns group time. Furthermore, group (required) factor 2 levels time numeric. can also check reference group . also useful point check whether outlier samples (columns) using PCA. first principal component (PC) seems capture time variation second PC captures differences diet. Therefore, main variations interested captured top 2 PCs. appear obvious outliers. 23060 genes (features) mouse transcriptome (according Ensembl) included data. want keep strongly enough expressed genes differential rhythmicity analysis.  run compareRhythms() data let us check * number columns expr_filtered match number rows exp_design. * expr_filtered matrix exp_design data.frame analyze microarray data using model selection first. Log2 normalized data high_fat_diet_ma can directly used. model selection alone, number arrhythmic features returned, since features weights less schwarz_wt_cutoff unclassified. , 13162 - 9734= 3428 genes left unclassified. peak--trough amplitude peak phase (acrophase) estimates desired, amplitude units data (method) phase radians. get phase h, multiply phase estimates period/(2*pi). Next, analyze data using DODR method. show entire results (just_classify = FALSE) simplicity. addition rhythm parameters (amplitude phase), boolean columns stating feature rhythmic NC HFD whether feature also differentially rhythmic. derived using tuning parameters rhythm_fdr compare_fdr adjusted p-values two rhythmicity tests using RAIN differential rhythmicity test DODR. Recall previous two approaches specific microarray data. Finally, analyze data using linear modeling framework limma designed microarray analysis. returned columns similar DODR (based hypothesis testing approach). difference test rhythmicity either group can performed using single test, whose adjusted p-value returned. differential rhythmicity test compares circadian parameters (coefficients harmonic regression) two groups. boolean columns constructed () using p-values. Moreover, due similarity approaches results analyses similar. can also vary parameters amp_cutoff, compare_fdr rhythm_fdr necessary.","code":"library(compareRhythms) library(tidyverse) head(high_fat_diet_ma[,1:6]) #>                     NC_ZT0_1  NC_ZT0_2  NC_ZT0_3 HFD_ZT0_1 HFD_ZT0_2 HFD_ZT0_3 #> ENSMUSG00000000001  9.404793  9.328668  9.310453  9.335252  9.470418  9.511085 #> ENSMUSG00000000003  2.470968  2.358439  2.502844  2.530175  2.453542  2.562028 #> ENSMUSG00000000028  6.017191  5.769798  5.707153  6.015197  5.702113  5.751801 #> ENSMUSG00000000031  5.317120  5.010673  5.068763  5.107669  5.193487  4.935580 #> ENSMUSG00000000037  3.672698  3.670284  3.971859  3.556922  3.798398  3.641636 #> ENSMUSG00000000049 12.677798 12.739597 12.590512 12.699638 12.782454 12.613611 colnames(high_fat_diet_ma) #>  [1] \"NC_ZT0_1\"   \"NC_ZT0_2\"   \"NC_ZT0_3\"   \"HFD_ZT0_1\"  \"HFD_ZT0_2\"  #>  [6] \"HFD_ZT0_3\"  \"NC_ZT4_1\"   \"NC_ZT4_2\"   \"NC_ZT4_3\"   \"HFD_ZT4_1\"  #> [11] \"HFD_ZT4_2\"  \"HFD_ZT4_3\"  \"NC_ZT8_1\"   \"NC_ZT8_2\"   \"NC_ZT8_3\"   #> [16] \"HFD_ZT8_1\"  \"HFD_ZT8_2\"  \"HFD_ZT8_3\"  \"NC_ZT12_1\"  \"NC_ZT12_2\"  #> [21] \"NC_ZT12_3\"  \"HFD_ZT12_1\" \"HFD_ZT12_2\" \"HFD_ZT12_3\" \"NC_ZT16_1\"  #> [26] \"NC_ZT16_2\"  \"NC_ZT16_3\"  \"HFD_ZT16_1\" \"HFD_ZT16_2\" \"HFD_ZT16_3\" #> [31] \"NC_ZT20_1\"  \"NC_ZT20_2\"  \"NC_ZT20_3\"  \"HFD_ZT20_1\" \"HFD_ZT20_2\" #> [36] \"HFD_ZT20_3\" exp_design <- str_split(colnames(high_fat_diet_ma), \"_\", simplify = TRUE)     # split the names by _ exp_design <- as.data.frame(exp_design, stringsAsFactors=TRUE)    # convert from matrix to data.frame colnames(exp_design) <- c(\"group\", \"time\", \"rep\")    # name the columns exp_design$time <- as.numeric(sub(\"ZT\", \"\", exp_design$time)) # remove ZT prefix and make numeric head(exp_design) #>   group time rep #> 1    NC    0   1 #> 2    NC    0   2 #> 3    NC    0   3 #> 4   HFD    0   1 #> 5   HFD    0   2 #> 6   HFD    0   3 str(exp_design)   # view data type of each column #> 'data.frame':    36 obs. of  3 variables: #>  $ group: Factor w/ 2 levels \"HFD\",\"NC\": 2 2 2 1 1 1 2 2 2 1 ... #>  $ time : num  0 0 0 0 0 0 4 4 4 4 ... #>  $ rep  : Factor w/ 3 levels \"1\",\"2\",\"3\": 1 2 3 1 2 3 1 2 3 1 ... levels(exp_design$group) # the first level is the reference group #> [1] \"HFD\" \"NC\" exp_design$group <- relevel(exp_design$group, \"NC\") # choose NC as the correct reference group pca_ma <- prcomp(t(high_fat_diet_ma), scale. = FALSE)  varExp <- round(pca_ma$sdev^2/sum(pca_ma$sdev^2)*100, 1)  df <- data.frame(PC1 = pca_ma$x[,1], PC2 = pca_ma$x[,2],                  diet = exp_design$group,                  time = exp_design$time)  ggplot(df, aes(PC1, PC2)) + geom_text(aes(label=time, color=diet), size=3) +   theme_bw(base_size=10) +   scale_color_brewer(name = \"Diet\", palette=\"Dark2\") +    theme(aspect.ratio=1) + xlab(paste0(\"PC1, VarExp: \", varExp[1], \"%\")) +   ylab(paste0(\"PC2, VarExp: \", varExp[2], \"%\")) grp_ids <- levels(exp_design$group)   # extract the names of the two groups mean_g1 <- rowMeans(high_fat_diet_ma[, exp_design$group == grp_ids[1]]) # mean expression of group 1 mean_g2 <- rowMeans(high_fat_diet_ma[, exp_design$group == grp_ids[2]]) # mean expression of group 2  df <- bind_rows(data.frame(mean=mean_g1, group=grp_ids[1]),                 data.frame(mean=mean_g2, group=grp_ids[2]))    # data.frame for plotting  ggplot(df) +   stat_bin(aes(x=mean, fill=group), bins = 100) + facet_wrap(~group) + theme_bw(base_size=10) +   geom_vline(xintercept = 5.5, color=\"grey50\") + theme(strip.background = element_blank()) +   xlab(\"mean expression\") + guides(fill=\"none\") + ylab(\"number of genes\") +   scale_fill_brewer(palette=\"Dark2\") keep <- (mean_g1 > 5.5) | (mean_g2 > 5.5) table(keep)    # summary of how many genes will be kept after filtering #> keep #> FALSE  TRUE  #>  9898 13162 expr_filtered <- high_fat_diet_ma[keep, ] nrow(exp_design) == ncol(expr_filtered) #> [1] TRUE class(exp_design) #> [1] \"data.frame\" class(expr_filtered) #> [1] \"matrix\" \"array\" results <- compareRhythms(expr_filtered, exp_design = exp_design,                            period = 24, method = \"mod_sel\") # run with default parameters for schwarz_wt_cutoff and criterion head(results) #>                   id category #> 1 ENSMUSG00000000001    arrhy #> 2 ENSMUSG00000000028    arrhy #> 3 ENSMUSG00000000049    arrhy #> 4 ENSMUSG00000000056   change #> 5 ENSMUSG00000000058    arrhy #> 6 ENSMUSG00000000078    arrhy table(results$category)    # number of genes in the different categories #>  #>  arrhy   loss   gain   same change  #>   8911    137     27    501    158 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"mod_sel\", just_classify = FALSE) # run with default parameters for schwarz_wt_cutoff and criterion head(results) #>                   id category   NC_amp NC_phase   HFD_amp HFD_phase   weights #> 1 ENSMUSG00000000001    arrhy 0.000000 0.000000 0.0000000  0.000000 0.7949295 #> 2 ENSMUSG00000000028    arrhy 0.000000 0.000000 0.0000000  0.000000 0.7822633 #> 3 ENSMUSG00000000049    arrhy 0.000000 0.000000 0.0000000  0.000000 0.6327680 #> 4 ENSMUSG00000000056   change 1.097253 2.373042 0.7517809  2.180985 0.6574918 #> 5 ENSMUSG00000000058    arrhy 0.000000 0.000000 0.0000000  0.000000 0.8867482 #> 6 ENSMUSG00000000078    arrhy 0.000000 0.000000 0.0000000  0.000000 0.6069374 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"dodr\", just_classify = FALSE) # run with default parameters head(results) #>                   id category rhythmic_in_NC rhythmic_in_HFD diff_rhythmic #> 1 ENSMUSG00000000056     same           TRUE            TRUE         FALSE #> 2 ENSMUSG00000000555     same           TRUE            TRUE         FALSE #> 3 ENSMUSG00000000567     same           TRUE            TRUE         FALSE #> 4 ENSMUSG00000000708     same           TRUE           FALSE         FALSE #> 5 ENSMUSG00000000876     same           TRUE            TRUE         FALSE #> 6 ENSMUSG00000001018     same           TRUE           FALSE         FALSE #>      NC_amp  NC_phase    HFD_amp HFD_phase adj_p_val_NC adj_p_val_HFD #> 1 1.0972527 2.3730421 0.75178092  2.180985 1.088656e-05  9.814312e-06 #> 2 1.1161226 5.5799337 0.90190671  5.400475 2.045434e-05  2.755708e-05 #> 3 0.8647148 0.2533993 0.62547925  6.263871 4.117639e-04  1.503105e-03 #> 4 0.5127966 2.4419457 0.04522975  2.532181 2.210451e-03  9.421081e-01 #> 5 0.7570742 5.9485326 0.76704298  5.346225 3.682985e-05  8.200630e-05 #> 6 0.6343907 1.3344650 0.34417635  1.403223 2.285075e-03  3.077466e-03 #>   adj_p_val_dodr #> 1     0.27170004 #> 2     0.48350547 #> 3     0.48681880 #> 4     0.07669958 #> 5     0.05815103 #> 6     0.33171207 table(results$category)   # number of genes in the different categories #>  #> change   gain   loss   same  #>     39      6     32   1157 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"limma\", just_classify = FALSE) # run with default parameters head(results) #>                   id category rhythmic_in_NC rhythmic_in_HFD diff_rhythmic #> 1 ENSMUSG00000000056     same           TRUE            TRUE         FALSE #> 2 ENSMUSG00000000303     same          FALSE            TRUE         FALSE #> 3 ENSMUSG00000000555     same           TRUE            TRUE         FALSE #> 4 ENSMUSG00000000567     same           TRUE            TRUE         FALSE #> 5 ENSMUSG00000000708     same           TRUE           FALSE         FALSE #> 6 ENSMUSG00000000876     same           TRUE            TRUE         FALSE #>      NC_amp  NC_phase    HFD_amp  HFD_phase adj_p_val_NC_or_HFD adj_p_val_DR #> 1 1.0972527 2.3730421 0.75178092 2.18098503        1.906244e-11   0.12104887 #> 2 0.4474557 5.8966561 0.85843846 0.02256061        2.131371e-02   0.47497910 #> 3 1.1161226 5.5799337 0.90190671 5.40047547        2.510419e-11   0.34303641 #> 4 0.8647148 0.2533993 0.62547925 6.26387110        1.970017e-05   0.47532705 #> 5 0.5127966 2.4419457 0.04522975 2.53218127        2.401673e-03   0.06055589 #> 6 0.7570742 5.9485326 0.76704298 5.34622495        1.126906e-09   0.05594469 table(results$category)   # number of genes in the different categories #>  #> change   gain   loss   same  #>     46      9     33   1025 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"limma\", just_classify = TRUE, amp_cutoff = 0.1) table(results$category) #>  #> change   gain   loss   same  #>     62      1      1   3118 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"limma\", just_classify = TRUE, rhythm_fdr = 0.1) table(results$category) #>  #> change   gain   loss   same  #>     41      8     30   1122 results <- compareRhythms(expr_filtered, exp_design = exp_design, period = 24,                            method = \"limma\", just_classify = TRUE, compare_fdr = 0.1) table(results$category) #>  #> change   gain   loss   same  #>     97     19     80    917"},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"example-2-rna-seq-data","dir":"Articles","previous_headings":"","what":"Example 2: RNA-seq data","title":"Analyzing rhythmic data with compareRhythms","text":"next analyze RNA-sequencing dataset comparing effect high fat diet mouse liver transcriptome experimental design (Quagliarini et al. 2019). data provided package 37310x36 matrix called high_fat_diet_rnaseq. follow similar sequence steps microarrays Example 1. next construct data.frame experimental design data column names. , fix “NC” reference level factor group column. Next, data matrix must filtered include sufficiently expressed genes. used convenient function filterByExpr() edgeR select genes sufficiently expression (20 counts median library size 70% samples group). point, like ensure outlier samples. using utilities provided edgeR can use steps DESeq2 vignette instead.  samples appear separate two diet groups. ZT12 sample NC likely outlier. experimental design now match count matrix removed outlier. also remove sample exp_design. Now, data ready compareRhythms. can use voom, DESeq2 edgeR. voom analysis can take care outlier samples (without removing outlier samples) setting outliers=TRUE. generally powerful removing outlier sample. course, hypothesis-testing based methods can fine tuned changing compare_fdr, rhythm_fdr amp_cutoff. also possible process data using model selection data normalized. use tools edgeR compute normalized log counts per million expression data apply model selection Example 1.","code":"library(compareRhythms) library(edgeR) library(tidyverse) library(DESeq2) head(high_fat_diet_rnaseq[, 1:6]) #>                      HFD_ZT0_1 HFD_ZT0_2 HFD_ZT0_3 HFD_ZT4_1 HFD_ZT4_2 #> ENSMUSG00000090025.1         0         0         0         0         0 #> ENSMUSG00000064842.1         0         0         0         0         0 #> ENSMUSG00000051951.5         0         0         0         0         0 #> ENSMUSG00000089699.1         0         0         0         0         0 #> ENSMUSG00000088390.1         0         0         0         0         0 #> ENSMUSG00000089420.1         0         0         0         0         0 #>                      HFD_ZT4_3 #> ENSMUSG00000090025.1         0 #> ENSMUSG00000064842.1         0 #> ENSMUSG00000051951.5         2 #> ENSMUSG00000089699.1         0 #> ENSMUSG00000088390.1         0 #> ENSMUSG00000089420.1         0  colnames(high_fat_diet_rnaseq) #>  [1] \"HFD_ZT0_1\"  \"HFD_ZT0_2\"  \"HFD_ZT0_3\"  \"HFD_ZT4_1\"  \"HFD_ZT4_2\"  #>  [6] \"HFD_ZT4_3\"  \"HFD_ZT8_1\"  \"HFD_ZT8_2\"  \"HFD_ZT8_3\"  \"HFD_ZT12_1\" #> [11] \"HFD_ZT12_2\" \"HFD_ZT12_3\" \"HFD_ZT16_1\" \"HFD_ZT16_2\" \"HFD_ZT16_3\" #> [16] \"HFD_ZT20_1\" \"HFD_ZT20_2\" \"HFD_ZT20_3\" \"NC_ZT0_1\"   \"NC_ZT0_2\"   #> [21] \"NC_ZT0_3\"   \"NC_ZT4_1\"   \"NC_ZT4_2\"   \"NC_ZT4_3\"   \"NC_ZT8_1\"   #> [26] \"NC_ZT8_2\"   \"NC_ZT8_3\"   \"NC_ZT12_1\"  \"NC_ZT12_2\"  \"NC_ZT12_3\"  #> [31] \"NC_ZT16_1\"  \"NC_ZT16_2\"  \"NC_ZT16_3\"  \"NC_ZT20_1\"  \"NC_ZT20_2\"  #> [36] \"NC_ZT20_3\" exp_design <- str_split(colnames(high_fat_diet_rnaseq), \"_\", simplify = TRUE)     # split the names by _ exp_design <- as.data.frame(exp_design, stringsAsFactors=TRUE)    # convert from matrix to data.frame colnames(exp_design) <- c(\"group\", \"time\", \"rep\")    # name the columns exp_design$time <- as.numeric(sub(\"ZT\", \"\", exp_design$time)) # remove ZT prefix and make numeric head(exp_design) #>   group time rep #> 1   HFD    0   1 #> 2   HFD    0   2 #> 3   HFD    0   3 #> 4   HFD    4   1 #> 5   HFD    4   2 #> 6   HFD    4   3 str(exp_design)   # view data type of each column #> 'data.frame':    36 obs. of  3 variables: #>  $ group: Factor w/ 2 levels \"HFD\",\"NC\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ time : num  0 0 0 4 4 4 8 8 8 12 ... #>  $ rep  : Factor w/ 3 levels \"1\",\"2\",\"3\": 1 2 3 1 2 3 1 2 3 1 ... levels(exp_design$group) # the first level is the reference group #> [1] \"HFD\" \"NC\" exp_design$group <- relevel(exp_design$group, \"NC\") # choose NC as the correct reference group keep <- filterByExpr(high_fat_diet_rnaseq, group = exp_design$group, min.count=20) table(keep)   # view the number of genes retained. #> keep #> FALSE  TRUE  #> 24375 12935 counts <- high_fat_diet_rnaseq[keep, ] y_explore <- DGEList(counts=counts, group = exp_design$group) y_explore <- calcNormFactors(y_explore) mdsscale <- plotMDS(y_explore, plot = FALSE)  df <- data.frame(X = mdsscale$x, Y = mdsscale$y,                  diet = exp_design$group,                  time = exp_design$time)  ggplot(df, aes(X, Y)) + geom_text(aes(label=time, color=diet), size=3) +   theme_bw(base_size=10) +   scale_color_brewer(name = \"Diet\", palette=\"Dark2\") +    theme(aspect.ratio=1) + xlab(\"Leading logFC dim 1\") + ylab(\"Leading logFC dim 2\") ind <- which.max(df$X)    # find sample with the largest X deviation (our outlier) counts_no_outlier <- counts[, -ind]   # remove that sample dim(counts_no_outlier) #> [1] 12935    35 nrow(exp_design) == ncol(counts_no_outlier)   #input-check #> [1] FALSE exp_design_no_outlier <- exp_design[-ind, ] nrow(exp_design_no_outlier) == ncol(counts_no_outlier)   #input-check #> [1] TRUE results1 <- compareRhythms(counts_no_outlier, exp_design_no_outlier, method = \"voom\")  # with default parameters table(results1$category) #>  #> change   loss   same  #>     24      5   2506 results2 <- compareRhythms(counts_no_outlier, exp_design_no_outlier, method = \"deseq2\")  # with default parameters table(results2$category) #>  #> change   gain   loss   same  #>     68     17     16   2789 results3 <- compareRhythms(counts_no_outlier, exp_design_no_outlier, method = \"edger\")  # with default parameters table(results3$category) #>  #> change   gain   loss   same  #>     20      1      4   2642 results4 <- compareRhythms(counts, exp_design, method = \"voom\", outliers = TRUE)  # with default parameters table(results4$category) #>  #> change   gain   loss   same  #>    125     41     32   2943 y <- DGEList(counts_no_outlier) y <- calcNormFactors(y) results5 <- compareRhythms(cpm(y, log = TRUE), exp_design_no_outlier, method = \"mod_sel\")  # with default parameters table(results5$category) #>  #>  arrhy   loss   gain   same change  #>   7070    112    295   1519    172"},{"path":"https://bharathananth.github.io/compareRhythms/articles/UserGuide.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Analyzing rhythmic data with compareRhythms","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] DESeq2_1.48.1               SummarizedExperiment_1.38.1 #>  [3] Biobase_2.68.0              MatrixGenerics_1.20.0       #>  [5] matrixStats_1.5.0           GenomicRanges_1.60.0        #>  [7] GenomeInfoDb_1.44.0         IRanges_2.42.0              #>  [9] S4Vectors_0.46.0            BiocGenerics_0.54.0         #> [11] generics_0.1.4              edgeR_4.6.3                 #> [13] limma_3.64.1                lubridate_1.9.4             #> [15] forcats_1.0.0               stringr_1.5.1               #> [17] dplyr_1.1.4                 purrr_1.1.0                 #> [19] readr_2.1.5                 tidyr_1.3.1                 #> [21] tibble_3.3.0                ggplot2_3.5.2               #> [23] tidyverse_2.0.0             compareRhythms_1.1.0        #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        DODR_0.99.2             farver_2.1.2            #>  [4] fastmap_1.2.0           digest_0.6.37           timechange_0.3.0        #>  [7] lifecycle_1.0.4         survival_3.8-3          Rfit_0.27.0             #> [10] statmod_1.5.0           magrittr_2.0.3          compiler_4.5.1          #> [13] rlang_1.1.6             sass_0.4.10             tools_4.5.1             #> [16] yaml_2.3.10             knitr_1.50              S4Arrays_1.8.1          #> [19] labeling_0.4.3          DelayedArray_0.34.1     npsm_2.0.0              #> [22] plyr_1.8.9              RColorBrewer_1.1-3      BiocParallel_1.42.1     #> [25] abind_1.4-8             withr_3.0.2             desc_1.4.3              #> [28] grid_4.5.1              multtest_2.64.0         scales_1.4.0            #> [31] MASS_7.3-65             cli_3.6.5               rmarkdown_2.29          #> [34] crayon_1.5.3            ragg_1.4.0              httr_1.4.7              #> [37] tzdb_0.5.0              cachem_1.1.0            splines_4.5.1           #> [40] assertthat_0.2.1        parallel_4.5.1          XVector_0.48.0          #> [43] vctrs_0.6.5             Matrix_1.7-3            jsonlite_2.0.0          #> [46] hms_1.1.3               systemfonts_1.2.3       locfit_1.5-9.12         #> [49] jquerylib_0.1.4         glue_1.8.0              pkgdown_2.1.3           #> [52] codetools_0.2-20        stringi_1.8.7           gtable_0.3.6            #> [55] UCSC.utils_1.4.0        gmp_0.7-5               pillar_1.11.0           #> [58] htmltools_0.5.8.1       GenomeInfoDbData_1.2.14 R6_2.6.1                #> [61] rain_1.42.0             textshaping_1.0.1       evaluate_1.0.4          #> [64] lattice_0.22-7          bslib_0.9.0             class_7.3-23            #> [67] Rcpp_1.1.0              SparseArray_1.8.0       xfun_0.52               #> [70] fs_1.6.6                pkgconfig_2.0.3"},{"path":[]},{"path":"https://bharathananth.github.io/compareRhythms/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bharath Ananthasubramaniam. Maintainer.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pelikan, ., Herzel, H., Kramer, . Ananthasubramaniam, B. (2022) Venn diagram analysis overestimates extent circadian rhythm reprogramming. FEBS Journal, 289: 6605-6621. URL https://febs.onlinelibrary.wiley.com/doi/10.1111/febs.16095","code":"@Article{,   title = {Venn diagram analysis overestimates the extent of circadian rhythm reprogramming},   author = {Anne Pelikan and Hanspeter Herzel and Achim Kramer and Bharath Ananthasubramaniam},   journal = {FEBS Journal},   year = {2022},   volume = {289},   number = {21},   pages = {6605-6621},   doi = {10.1111/febs.16095}, }"},{"path":"https://bharathananth.github.io/compareRhythms/index.html","id":"comparerhythms-","dir":"","previous_headings":"","what":"Approaches to identify Differential Rhythmicity","title":"Approaches to identify Differential Rhythmicity","text":"goal compareRhythms find features altered circadian rhythm parameters (amplitude phase) control experimental groups. fit function Acos(2πt/24−ϕ)\\cos(2\\pi t/24 - \\phi) data defines rhythm parameters amplitude (AA) phase (ϕ\\phi).","code":""},{"path":"https://bharathananth.github.io/compareRhythms/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Approaches to identify Differential Rhythmicity","text":"can install current version compareRhythms GitHub :","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(version = \"3.19\")   # This installs bioconductor, but version 3.15 onwards are also ok BiocManager::install(c(\"SummarizedExperiment\", \"DESeq2\", \"edgeR\", \"limma\", \"rain\")) # Packages needed by compareRhythms install.packages(\"devtools\")    # if it is not already installed devtools::install_github(\"cran/npsm\")   # Package archived by CRAN devtools::install_github(\"cran/DODR\")   # Package archived by CRAN devtools::install_github(\"bharathananth/compareRhythms\", build_vignettes = TRUE, dependencies = TRUE)"},{"path":"https://bharathananth.github.io/compareRhythms/index.html","id":"usage-summary","dir":"","previous_headings":"","what":"Usage summary","title":"Approaches to identify Differential Rhythmicity","text":"analysis run using single function compareRhythms(). execute function, three necessary ingredients timeseries data, experimental design parameters choose tune method. output function data.frame IDs differentially rhythmic features, category classified optionally rhythm parameters feature two groups. differential rhythmicity categories gain , loss , change , rhythms (respect reference/control group). complete examples, please refer vignette titled User Guide running view documentation.","code":"library(compareRhythms) vignette(\"UserGuide\", package=\"compareRhythms\")"},{"path":"https://bharathananth.github.io/compareRhythms/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Approaches to identify Differential Rhythmicity","text":"Please cite compareRhythms publications : Software v1.0.0 https://doi.org/10.5281/zenodo.7699722 Venn diagram analysis overestimates extent circadian rhythm reprogramming. FEBS J, 289: 6605-6621. https://doi.org/10.1111/febs.16095 R code perform analyses publication (using compareRhythms) can found repository https://github.com/bharathananth/FEBSJ-VDA-overestimates","code":""},{"path":"https://bharathananth.github.io/compareRhythms/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Approaches to identify Differential Rhythmicity","text":"encounter bug, please file minimal reproducible example github.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/compareRhythms.html","id":null,"dir":"Reference","previous_headings":"","what":"Run differential rhythmicity analysis — compareRhythms","title":"Run differential rhythmicity analysis — compareRhythms","text":"differential rhythmicity analysis run call function. execute function, three necessary ingredients timeseries data, experimental design parameters choose tune method.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/compareRhythms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run differential rhythmicity analysis — compareRhythms","text":"","code":"compareRhythms(   data,   exp_design,   lengths = NULL,   method = \"mod_sel\",   period = 24,   rhythm_fdr = 0.05,   compare_fdr = 0.05,   amp_cutoff = 0.5,   criterion = \"bic\",   schwarz_wt_cutoff = 0.6,   just_classify = TRUE,   robust = TRUE,   outliers = FALSE,   longitudinal = FALSE,   just_rhythms = TRUE )"},{"path":"https://bharathananth.github.io/compareRhythms/reference/compareRhythms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run differential rhythmicity analysis — compareRhythms","text":"data matrix log2 expression values (microarray), expression counts (RNA-seq) normalized data (see Details). exp_design data.frame experimental design least two columns: \"time\" \"group\". lengths data.frame average transcript lengths. used methods \"deseq\" \"edgeR\". method method analysis. one \"mod_sel\" model selection, \"dodr\" analysis using DODR::dodr, \"limma\" linear-modeling approach based limma, \"voom\" linear-modeling approach RNA-Seq using limma::voom, \"deseq2\" RNA-seq analysis using DESeq2, \"edger\" RNA-seq analysis using edgeR, \"cosinor\" simple cosinor-based analysis independent samples repeated samples. period period rhythm tested (default = 24) rhythm_fdr false discovery cutoff finding rhythmic time series (default = 0.05) compare_fdr false discovery cutoff comparison rhythms (default = 0.05) amp_cutoff minimum peak--trough amplitude log2 scale considered biologically relevant (default = 0.5) criterion criterion used model selection. can \"aic\" \"bic\" (default = \"bic\"). used method = \"mod_sel\". schwarz_wt_cutoff conditional probability best model true model. Genes conditional probability smaller cutoff deemed unclassifiable. used method = \"mod_sel\". (default = 0.4) just_classify Boolean specifying whether genes must classified (TRUE) amplitude phases fits also returned (FALSE) robust Boolean turn robust computation statistics different methods (default = TRUE). outliers Boolean specifying weights must computed sample account outliers. used method = \"voom\". longitudinal Boolean specifying repeated samples one experimental unit. used method = \"cosinor\". just_rhythms Boolean specifying whether rhythm analysis (True, default) differential expression/magnitude analysis also performed.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/compareRhythms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run differential rhythmicity analysis — compareRhythms","text":"data.frame names differentially rhythmic features, category classified optionally rhythm parameters features group. differential rhythmicity categories gain , loss , change , rhythms (respect reference/control group).","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Effect of high fat diet on the liver transcriptome - Microarray — high_fat_diet_ma","title":"Effect of high fat diet on the liver transcriptome - Microarray — high_fat_diet_ma","text":"Time-series data mouse liver transcriptome measured normal chow read using custom CDF file Brainarray version 24.0.0 annotated Ensembl Gene ID followed RMA normalization. expression data log2 scale. sample specification present column names <group>_ZT<time> format.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effect of high fat diet on the liver transcriptome - Microarray — high_fat_diet_ma","text":"","code":"high_fat_diet_ma"},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_ma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Effect of high fat diet on the liver transcriptome - Microarray — high_fat_diet_ma","text":"object class matrix (inherits array) 23060 rows 36 columns.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_ma.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Effect of high fat diet on the liver transcriptome - Microarray — high_fat_diet_ma","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52333","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_rnaseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Effect of high fat diet on the liver transcriptome - RNA-sequencing — high_fat_diet_rnaseq","title":"Effect of high fat diet on the liver transcriptome - RNA-sequencing — high_fat_diet_rnaseq","text":"Time-series data mouse liver transcriptome measured normal chow (NC) high fat diet (HFD). RNA-seq data aligned using STAR mm9 genome quantified using featureCounts (see GSE108688 details) annotated Ensembl Gene ID. sample specification present column names <group>ZT<time><replicate> format.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_rnaseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effect of high fat diet on the liver transcriptome - RNA-sequencing — high_fat_diet_rnaseq","text":"","code":"high_fat_diet_rnaseq"},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_rnaseq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Effect of high fat diet on the liver transcriptome - RNA-sequencing — high_fat_diet_rnaseq","text":"object class matrix (inherits array) 37310 rows 36 columns.","code":""},{"path":"https://bharathananth.github.io/compareRhythms/reference/high_fat_diet_rnaseq.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Effect of high fat diet on the liver transcriptome - RNA-sequencing — high_fat_diet_rnaseq","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE108688","code":""}]
